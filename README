Document Progress
- Validate user args
    1. Set      (Complete)
    2. Define   (Complete)
    3. Retrieve (Complete)

- Read a matrix from the file
    - Req: Entire file path must exist, otherwise error (Complete)
    - Read only O's and .'s else error

- Altar the matrix
    - Rules: 
    1) Any position in the matrix with a period ‘.’ is considered 
        “dead” during the current time step.
    2) Any position in the matrix with a capital ‘O’ is considered 
        “alive” during the current time step.
    3) If an “alive” square has exactly two, three, or four living 
        neighbors, then it continues to be “alive” in the next time step.
    4) If a “dead” square has an even number greater than 0 living 
        neighbors, then it will be “alive” in the next time step.
    5) Every other square dies or remains dead, causing it to be 
        “dead” in the next time step.
    
    - Serial Version (IP)
    - Multi-threaded Version

- Write a matrix into a file
    - Req: Directory must exist (Complete)

Your solution will accept the starting matrix (Time Step 0) as a file
from the command line and then simulate steps 1 through 100. The final 
matrix (Time Step 100) will then be written to an output file whose name 
and path is dictated by a separate command line argument. These files must 
contain a copy of your matrix with each row of the matrix printed on separate 
lines and no characters in between the columns. Example files are provided as 
part of the project.

-------------------------------------------------------------------------------------------------
You are tasked with creating a program capable of executing the first 100 steps of a modified cellular life simulator. 
This simulator will receive the path to the input file as an argument containing the starting cellular matrix.  
The program must then simulate the next 100 time-steps based on the algorithm discussed in the attached document.  
The simulation is guided by a handful of simplistic rules that will result in a seemingly complex simulation of cellular organisms.

This project will be accepted up to 2 days late - not 3 days.  All submissions must be turned in by end of day 12/4.

Grading program has been added to Quanah.  To test your program, do the following:

Log into quanah.hpcc.ttu.edu
Change directory (cd) to the directory with your final project python file. Make sure you named it correctly.
Run the grading script:     /lustre/scratch/errees/cs3361/project/grader.sh
Enter your email
Select which test you want to run:
Serial test will run a single 100x100 matrix on a single thread then report results (Normally runs in <15 minutes)
Parallel test will run the same 100x100 matrix with 1, 2, 4, 8, 16, and 32 threads/processes then report results (Normally runs and completes within 2 hours)
Full Grader will run the following tests then report the results (Normally runs and completed within 48 hours - though should be <12 hours).
100x100 matrix with 1, 2, 4, 8, 16, and 32 threads/processes.
1000x1000 matrix with 1, 2, 4, 8, 16, and 32 threads/processes.
10000x10000 matrix with 9, 18, and 36 threads/processes.
You will receive an email when your program begins running in the cluster.
You will receive another email when your program completes running in the cluster.
Once you get the email stating it is complete, run the "cat" command given by the script when you ran it.
This will print out what R# was detected for you, whether your program passed each test case (got correct final output) and how long each test case took (in seconds).
